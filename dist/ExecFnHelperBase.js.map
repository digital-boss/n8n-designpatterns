{
  "version": 3,
  "sources": ["../src/ExecFnHelperBase.ts"],
  "sourcesContent": ["import {\n\tCoreOptions,\n\tOptionsWithUri,\n} from 'request';\nimport { IDataObject, IExecuteFunctions } from 'n8n-workflow';\nimport { IExecItemDependance } from './interfaces';\n\n/**\n * IExecuteFunctions Helper - Logic for getting parameters.\n */\nexport class ExecFnHelperBase implements IExecItemDependance {\n\titemIndex = 0;\n\texecFns: IExecuteFunctions;\n\n\tconstructor (\n\t\texecFns: IExecuteFunctions,\n\t) {\n\t\tthis.execFns = execFns;\n\t}\n\n\tupdateIndex (itemIndex: number) {\n\t\tthis.itemIndex = itemIndex;\n\t}\n\n\tgetParam (name: string): any {\n\t\treturn this.execFns.getNodeParameter(name, this.itemIndex);\n\t}\n\n\tgetAllParams (): IDataObject {\n\t\tconst params = this.execFns.getNode().parameters;\n\t\tconst paramsWithValues = Object.keys(params).map(name => [name, this.getParam(name)]);\n\t\treturn Object.fromEntries(paramsWithValues);\n\t}\n\n\tapplyPathParams (path: string): string {\n\t\tconst rx = new RegExp('{[a-zA-Z_][a-zA-Z0-9]*}', 'g');\n\t\tconst matches = path.match(rx);\n\t\tif (matches && matches.length > 0) {\n\t\t\tmatches.forEach((match, i) => {\n\t\t\t\tconst value = this.getParam(match.slice(1, -1)) as string;\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tpath = path.replace(match, value);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn path;\n\t}\n\n}\n"],
  "mappings": "AAUO,GAAM,GAAN,KAAsD,CAI5D,YACC,EACC,CALF,eAAY,EAMX,KAAK,QAAU,CAChB,CAEA,YAAa,EAAmB,CAC/B,KAAK,UAAY,CAClB,CAEA,SAAU,EAAmB,CAC5B,MAAO,MAAK,QAAQ,iBAAiB,EAAM,KAAK,SAAS,CAC1D,CAEA,cAA6B,CAC5B,GAAM,GAAS,KAAK,QAAQ,QAAQ,EAAE,WAChC,EAAmB,OAAO,KAAK,CAAM,EAAE,IAAI,GAAQ,CAAC,EAAM,KAAK,SAAS,CAAI,CAAC,CAAC,EACpF,MAAO,QAAO,YAAY,CAAgB,CAC3C,CAEA,gBAAiB,EAAsB,CACtC,GAAM,GAAK,GAAI,QAAO,0BAA2B,GAAG,EAC9C,EAAU,EAAK,MAAM,CAAE,EAC7B,MAAI,IAAW,EAAQ,OAAS,GAC/B,EAAQ,QAAQ,CAAC,EAAO,IAAM,CAC7B,GAAM,GAAQ,KAAK,SAAS,EAAM,MAAM,EAAG,EAAE,CAAC,EAC9C,AAAI,IAAU,QACb,GAAO,EAAK,QAAQ,EAAO,CAAK,EAElC,CAAC,EAEK,CACR,CAED",
  "names": []
}
